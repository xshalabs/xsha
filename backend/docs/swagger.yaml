basePath: /api/v1
definitions:
  database.Admin:
    properties:
      avatar:
        $ref: '#/definitions/database.AdminAvatar'
      avatar_id:
        type: integer
      created_at:
        type: string
      created_by:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      last_login_at:
        type: string
      last_login_ip:
        type: string
      name:
        type: string
      role:
        $ref: '#/definitions/database.AdminRole'
      updated_at:
        type: string
      username:
        type: string
    type: object
  database.AdminAvatar:
    properties:
      admin:
        $ref: '#/definitions/database.Admin'
      admin_id:
        type: integer
      content_type:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      file_name:
        type: string
      file_path:
        type: string
      file_size:
        type: integer
      id:
        type: integer
      original_name:
        type: string
      updated_at:
        type: string
      uuid:
        type: string
    type: object
  database.AdminAvatarMinimal:
    properties:
      original_name:
        type: string
      uuid:
        type: string
    type: object
  database.AdminListResponse:
    properties:
      avatar:
        $ref: '#/definitions/database.AdminAvatarMinimal'
      avatar_id:
        type: integer
      created_at:
        type: string
      created_by:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      last_login_at:
        type: string
      last_login_ip:
        type: string
      name:
        type: string
      role:
        $ref: '#/definitions/database.AdminRole'
      updated_at:
        type: string
      username:
        type: string
    type: object
  database.AdminRole:
    enum:
    - super_admin
    - admin
    - developer
    type: string
    x-enum-varnames:
    - AdminRoleSuperAdmin
    - AdminRoleAdmin
    - AdminRoleDeveloper
  database.ConversationStatus:
    enum:
    - pending
    - running
    - success
    - failed
    - cancelled
    type: string
    x-enum-varnames:
    - ConversationStatusPending
    - ConversationStatusRunning
    - ConversationStatusSuccess
    - ConversationStatusFailed
    - ConversationStatusCancelled
  database.DevEnvironment:
    properties:
      admin:
        $ref: '#/definitions/database.Admin'
      admin_id:
        description: Legacy single admin relationship (for backward compatibility)
        type: integer
      admins:
        description: Many-to-many relationship for environment admins
        items:
          $ref: '#/definitions/database.Admin'
        type: array
      cpu_limit:
        type: number
      created_at:
        type: string
      created_by:
        type: string
      description:
        type: string
      docker_image:
        type: string
      env_vars:
        type: string
      id:
        type: integer
      memory_limit:
        type: integer
      name:
        type: string
      session_dir:
        type: string
      system_prompt:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  database.GitCredential:
    properties:
      admin:
        $ref: '#/definitions/database.Admin'
      admin_id:
        description: Legacy single admin relationship (for backward compatibility)
        type: integer
      admins:
        description: Many-to-many relationship for credential admins
        items:
          $ref: '#/definitions/database.Admin'
        type: array
      created_at:
        type: string
      created_by:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      public_key:
        type: string
      type:
        $ref: '#/definitions/database.GitCredentialType'
      updated_at:
        type: string
      username:
        type: string
    type: object
  database.GitCredentialType:
    enum:
    - password
    - token
    - ssh_key
    type: string
    x-enum-varnames:
    - GitCredentialTypePassword
    - GitCredentialTypeToken
    - GitCredentialTypeSSHKey
  database.GitProtocolType:
    enum:
    - https
    - ssh
    type: string
    x-enum-varnames:
    - GitProtocolHTTPS
    - GitProtocolSSH
  database.Project:
    properties:
      admin:
        $ref: '#/definitions/database.Admin'
      admin_id:
        type: integer
      created_at:
        type: string
      created_by:
        type: string
      credential:
        $ref: '#/definitions/database.GitCredential'
      credential_id:
        type: integer
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      protocol:
        $ref: '#/definitions/database.GitProtocolType'
      repo_url:
        type: string
      system_prompt:
        type: string
      updated_at:
        type: string
    type: object
  database.Task:
    properties:
      admin:
        $ref: '#/definitions/database.Admin'
      admin_id:
        type: integer
      conversation_count:
        type: integer
      conversations:
        items:
          $ref: '#/definitions/database.TaskConversation'
        type: array
      created_at:
        type: string
      created_by:
        type: string
      dev_environment:
        $ref: '#/definitions/database.DevEnvironment'
      dev_environment_id:
        type: integer
      has_pull_request:
        type: boolean
      id:
        type: integer
      latest_execution_time:
        type: string
      project:
        $ref: '#/definitions/database.Project'
      project_id:
        type: integer
      session_id:
        type: string
      start_branch:
        type: string
      status:
        $ref: '#/definitions/database.TaskStatus'
      title:
        type: string
      updated_at:
        type: string
      work_branch:
        type: string
      workspace_path:
        type: string
    type: object
  database.TaskConversation:
    properties:
      admin:
        $ref: '#/definitions/database.Admin'
      admin_id:
        type: integer
      commit_hash:
        type: string
      content:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      env_params:
        description: EnvParams 环境参数，如model等参数的JSON存储
        type: string
      execution_time:
        description: ExecutionTime 执行时间，如果为空则立即执行
        type: string
      id:
        type: integer
      status:
        $ref: '#/definitions/database.ConversationStatus'
      task:
        $ref: '#/definitions/database.Task'
      task_id:
        type: integer
      updated_at:
        type: string
    type: object
  database.TaskStatus:
    enum:
    - todo
    - in_progress
    - done
    - cancelled
    type: string
    x-enum-varnames:
    - TaskStatusTodo
    - TaskStatusInProgress
    - TaskStatusDone
    - TaskStatusCancelled
  handlers.AddAdminToEnvironmentRequest:
    description: Add admin to environment request
    properties:
      admin_id:
        type: integer
    required:
    - admin_id
    type: object
  handlers.AddCredentialAdminRequest:
    description: Request parameters for adding admin to credential
    properties:
      admin_id:
        example: 1
        type: integer
    required:
    - admin_id
    type: object
  handlers.BatchUpdateConfigsRequest:
    properties:
      configs:
        items:
          $ref: '#/definitions/handlers.ConfigUpdateItem'
        type: array
    required:
    - configs
    type: object
  handlers.BatchUpdateTaskStatusRequest:
    description: Batch update task status request
    properties:
      status:
        enum:
        - todo
        - in_progress
        - done
        - cancelled
        example: done
        type: string
      task_ids:
        example:
        - 1
        - 2
        - 3
        items:
          type: integer
        maxItems: 100
        minItems: 1
        type: array
    required:
    - status
    - task_ids
    type: object
  handlers.BatchUpdateTaskStatusResponse:
    description: Batch update task status response
    properties:
      failed_count:
        example: 1
        type: integer
      failed_ids:
        example:
        - 3
        items:
          type: integer
        type: array
      success_count:
        example: 2
        type: integer
      success_ids:
        example:
        - 1
        - 2
        items:
          type: integer
        type: array
    type: object
  handlers.ConfigUpdateItem:
    properties:
      config_key:
        type: string
      config_value:
        type: string
    required:
    - config_key
    - config_value
    type: object
  handlers.CreateConversationRequest:
    description: Create conversation request
    properties:
      attachment_ids:
        example:
        - 1
        - 2
        items:
          type: integer
        type: array
      content:
        example: Please implement the user authentication feature
        type: string
      env_params:
        example: '{"model":"sonnet"}'
        type: string
      execution_time:
        example: "2024-01-01T10:00:00Z"
        type: string
      task_id:
        example: 1
        type: integer
    required:
    - content
    - task_id
    type: object
  handlers.CreateCredentialRequest:
    description: Request parameters for creating Git credentials
    properties:
      description:
        example: Credential for GitHub projects
        type: string
      name:
        example: My GitHub Credential
        type: string
      secret_data:
        additionalProperties:
          type: string
        example:
          '{"password"': '"mypassword"}'
        type: object
      type:
        enum:
        - password
        - token
        - ssh_key
        example: password
        type: string
      username:
        example: myusername
        type: string
    required:
    - name
    - secret_data
    - type
    type: object
  handlers.CreateEnvironmentRequest:
    description: Create environment request
    properties:
      cpu_limit:
        maximum: 16
        minimum: 0.1
        type: number
      description:
        type: string
      docker_image:
        type: string
      env_vars:
        additionalProperties:
          type: string
        type: object
      memory_limit:
        maximum: 32768
        minimum: 128
        type: integer
      name:
        type: string
      system_prompt:
        type: string
      type:
        type: string
    required:
    - docker_image
    - name
    - type
    type: object
  handlers.CreateProjectRequest:
    description: Create project request
    properties:
      credential_id:
        type: integer
      description:
        type: string
      name:
        type: string
      protocol:
        enum:
        - https
        - ssh
        type: string
      repo_url:
        type: string
      system_prompt:
        type: string
    required:
    - name
    - repo_url
    type: object
  handlers.CreateTaskRequest:
    description: Create task request
    properties:
      attachment_ids:
        example:
        - 1
        - 2
        - 3
        items:
          type: integer
        type: array
      dev_environment_id:
        example: 1
        type: integer
      env_params:
        example: '{"model":"sonnet"}'
        type: string
      execution_time:
        example: "2024-01-01T10:00:00Z"
        type: string
      include_branches:
        example: true
        type: boolean
      project_id:
        example: 1
        type: integer
      requirement_desc:
        example: Fix the login validation issue
        type: string
      start_branch:
        example: main
        type: string
      title:
        example: Fix user authentication bug
        type: string
    required:
    - dev_environment_id
    - requirement_desc
    - start_branch
    - title
    type: object
  handlers.CreateTaskResponse:
    description: Create task response
    properties:
      project_branches:
        example:
        - main
        - develop
        - feature/user-auth
        items:
          type: string
        type: array
      task:
        $ref: '#/definitions/database.Task'
    type: object
  handlers.EnvironmentAdminsResponse:
    description: Environment admins response
    properties:
      admins:
        items:
          $ref: '#/definitions/database.AdminListResponse'
        type: array
    type: object
  handlers.FetchRepositoryBranchesRequest:
    description: Request parameters for fetching Git repository branch list
    properties:
      credential_id:
        example: 1
        type: integer
      repo_url:
        example: https://github.com/user/repo.git
        type: string
    required:
    - repo_url
    type: object
  handlers.FetchRepositoryBranchesResponse:
    description: Response for fetching Git repository branch list
    properties:
      branches:
        example:
        - main
        - develop
        - feature-1
        items:
          type: string
        type: array
      can_access:
        example: true
        type: boolean
      error_message:
        example: ""
        type: string
    type: object
  handlers.GetKanbanTasksResponse:
    description: Get kanban tasks response
    properties:
      cancelled:
        items:
          $ref: '#/definitions/database.Task'
        type: array
      done:
        items:
          $ref: '#/definitions/database.Task'
        type: array
      in_progress:
        items:
          $ref: '#/definitions/database.Task'
        type: array
      todo:
        items:
          $ref: '#/definitions/database.Task'
        type: array
    type: object
  handlers.UpdateConversationRequest:
    description: Update conversation request
    properties:
      content:
        example: Updated conversation content
        type: string
    type: object
  handlers.UpdateCredentialRequest:
    description: Request parameters for updating Git credentials
    properties:
      description:
        example: Updated description
        type: string
      name:
        example: Updated credential name
        type: string
      secret_data:
        additionalProperties:
          type: string
        example:
          '{"password"': '"newpassword"}'
        type: object
      username:
        example: newusername
        type: string
    type: object
  handlers.UpdateEnvironmentRequest:
    description: Update environment request
    properties:
      cpu_limit:
        type: number
      description:
        type: string
      env_vars:
        additionalProperties:
          type: string
        type: object
      memory_limit:
        type: integer
      name:
        type: string
      system_prompt:
        type: string
    type: object
  handlers.UpdateProjectRequest:
    description: Update project request
    properties:
      credential_id:
        example: 1
        type: integer
      description:
        example: Updated project description
        type: string
      name:
        example: Updated project name
        type: string
      repo_url:
        example: https://github.com/user/repo.git
        type: string
      system_prompt:
        example: Custom system prompt
        type: string
    type: object
  handlers.UpdateTaskRequest:
    description: Update task request
    properties:
      title:
        example: Updated task title
        type: string
    required:
    - title
    type: object
host: localhost:8080
info:
  contact: {}
  description: XSHA Backend API service, providing user authentication, project management,
    Git credential management and other functions
  title: XSHA Backend API
  version: "1.0"
paths:
  /admin/avatar/{uuid}:
    put:
      consumes:
      - application/json
      description: Update administrator's avatar by avatar UUID
      parameters:
      - description: Avatar UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Admin ID information
        in: body
        name: adminData
        required: true
        schema:
          properties:
            admin_id:
              type: integer
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Avatar updated successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Admin or avatar not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update admin avatar
      tags:
      - Admin Management
  /admin/avatar/preview/{uuid}:
    get:
      consumes:
      - application/json
      description: Preview avatar image by UUID
      parameters:
      - description: Avatar UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - image/*
      responses:
        "200":
          description: Avatar image for preview
          schema:
            type: file
        "400":
          description: Invalid UUID
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Avatar not found
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Preview avatar
      tags:
      - Admin Avatar
  /admin/avatar/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload an avatar image for administrator
      parameters:
      - description: Avatar image to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Avatar uploaded successfully
          schema:
            properties:
              data:
                type: object
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
        "413":
          description: File too large
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Upload avatar
      tags:
      - Admin Avatar
  /admin/login-logs:
    get:
      consumes:
      - application/json
      description: Get system login log records, supporting filtering by username,
        IP, success status, date range and pagination
      parameters:
      - description: Username filter
        in: query
        name: username
        type: string
      - description: IP address filter
        in: query
        name: ip
        type: string
      - description: Success status filter
        in: query
        name: success
        type: boolean
      - description: Start time filter (YYYY-MM-DD)
        in: query
        name: start_time
        type: string
      - description: End time filter (YYYY-MM-DD)
        in: query
        name: end_time
        type: string
      - description: Page number, defaults to 1
        in: query
        name: page
        type: integer
      - description: Page size, defaults to 20, maximum 100
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Login log list
          schema:
            properties:
              logs:
                items:
                  type: object
                type: array
              message:
                type: string
              page:
                type: number
              page_size:
                type: number
              total:
                type: number
              total_pages:
                type: number
            type: object
        "500":
          description: Failed to get login logs
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get login logs
      tags:
      - Authentication
  /admin/operation-logs:
    get:
      consumes:
      - application/json
      description: Get administrator operation log list with multi-condition filtering
        and pagination
      parameters:
      - description: Username filter
        in: query
        name: username
        type: string
      - description: Resource type filter
        in: query
        name: resource
        type: string
      - description: Operation type filter
        in: query
        name: operation
        type: string
      - description: Operation success status filter
        in: query
        name: success
        type: boolean
      - description: Start time filter (YYYY-MM-DD)
        in: query
        name: start_time
        type: string
      - description: End time filter (YYYY-MM-DD)
        in: query
        name: end_time
        type: string
      - description: Page number, default is 1
        in: query
        name: page
        type: integer
      - description: Page size, default is 20, maximum is 100
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Operation log list
          schema:
            properties:
              logs:
                items:
                  type: object
                type: array
              message:
                type: string
              page:
                type: number
              page_size:
                type: number
              total:
                type: number
              total_pages:
                type: number
            type: object
        "500":
          description: Failed to get operation logs
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get operation log list
      tags:
      - Admin Logs
  /admin/operation-logs/{id}:
    get:
      consumes:
      - application/json
      description: Get detailed information of a single operation log by ID
      parameters:
      - description: Log ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Operation log details
          schema:
            properties:
              log:
                type: object
              message:
                type: string
            type: object
        "400":
          description: Invalid log ID
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Log not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get operation log details
      tags:
      - Admin Logs
  /admin/operation-stats:
    get:
      consumes:
      - application/json
      description: Get operation statistics information within a specified time range
      parameters:
      - description: Username filter
        in: query
        name: username
        type: string
      - description: Start time (YYYY-MM-DD), default is 30 days ago
        in: query
        name: start_time
        type: string
      - description: End time (YYYY-MM-DD), default is today
        in: query
        name: end_time
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Operation statistics information
          schema:
            properties:
              end_time:
                type: string
              message:
                type: string
              operation_stats:
                type: object
              resource_stats:
                type: object
              start_time:
                type: string
            type: object
        "500":
          description: Failed to get operation statistics
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get operation statistics
      tags:
      - Admin Logs
  /admin/roles:
    get:
      consumes:
      - application/json
      description: Get list of available administrator roles
      produces:
      - application/json
      responses:
        "200":
          description: Available roles
          schema:
            properties:
              roles:
                items:
                  type: string
                type: array
            type: object
      security:
      - BearerAuth: []
      summary: Get available roles
      tags:
      - Admin Management
  /admin/users:
    get:
      consumes:
      - application/json
      description: List all administrator users with pagination and filtering
      parameters:
      - description: Username filter
        in: query
        name: username
        type: string
      - description: Active status filter
        in: query
        name: is_active
        type: boolean
      - description: Page number, defaults to 1
        in: query
        name: page
        type: integer
      - description: Page size, defaults to 20, maximum 100
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Admin list
          schema:
            properties:
              admins:
                items:
                  type: object
                type: array
              message:
                type: string
              page:
                type: number
              page_size:
                type: number
              total:
                type: number
              total_pages:
                type: number
            type: object
        "500":
          description: Failed to get admin list
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: List admin users
      tags:
      - Admin Management
    post:
      consumes:
      - application/json
      description: Create a new administrator user with optional role assignment
      parameters:
      - description: Admin user information (role is optional, defaults to 'admin')
        in: body
        name: adminData
        required: true
        schema:
          properties:
            email:
              type: string
            name:
              type: string
            password:
              type: string
            role:
              type: string
            username:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Admin created successfully
          schema:
            properties:
              admin:
                type: object
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create admin user
      tags:
      - Admin Management
  /admin/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete administrator user (cannot delete the last admin)
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Admin deleted successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Admin not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete admin user
      tags:
      - Admin Management
    get:
      consumes:
      - application/json
      description: Get administrator user by ID
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Admin information
          schema:
            properties:
              admin:
                type: object
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Admin not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get admin user
      tags:
      - Admin Management
    put:
      consumes:
      - application/json
      description: Update administrator user information including role
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: integer
      - description: 'Admin update information (role: super_admin|admin|developer)'
        in: body
        name: adminData
        required: true
        schema:
          properties:
            email:
              type: string
            is_active:
              type: boolean
            name:
              type: string
            role:
              type: string
            username:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Admin updated successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Admin not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update admin user
      tags:
      - Admin Management
  /admin/users/{id}/password:
    put:
      consumes:
      - application/json
      description: Change administrator user password
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: integer
      - description: New password
        in: body
        name: passwordData
        required: true
        schema:
          properties:
            new_password:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Admin not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Change admin password
      tags:
      - Admin Management
  /api/v1/admins:
    get:
      consumes:
      - application/json
      description: Get list of all administrator users (requires authentication)
      produces:
      - application/json
      responses:
        "200":
          description: Admin list
          schema:
            properties:
              admins:
                items:
                  type: object
                type: array
            type: object
        "500":
          description: Failed to get admin list
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: List admin users (authenticated)
      tags:
      - Admin Management
  /attachments:
    get:
      consumes:
      - application/json
      description: Get all attachments for a specific conversation
      parameters:
      - description: Conversation ID
        in: query
        name: conversation_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Attachments retrieved successfully
          schema:
            properties:
              data:
                items:
                  type: object
                type: array
              message:
                type: string
            type: object
        "400":
          description: Invalid conversation ID
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get conversation attachments
      tags:
      - Task Conversation Attachments
  /attachments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an attachment by ID
      parameters:
      - description: Attachment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Attachment deleted successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Invalid attachment ID
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Attachment not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete attachment
      tags:
      - Task Conversation Attachments
    get:
      consumes:
      - application/json
      description: Get attachment information by ID
      parameters:
      - description: Attachment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Attachment retrieved successfully
          schema:
            properties:
              data:
                type: object
              message:
                type: string
            type: object
        "400":
          description: Invalid attachment ID
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Attachment not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get attachment info
      tags:
      - Task Conversation Attachments
  /attachments/{id}/download:
    get:
      consumes:
      - application/json
      description: Download attachment file by ID
      parameters:
      - description: Attachment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/octet-stream
      responses:
        "200":
          description: Attachment file
          schema:
            type: file
        "400":
          description: Invalid attachment ID
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Attachment not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Download attachment
      tags:
      - Task Conversation Attachments
  /attachments/{id}/preview:
    get:
      consumes:
      - application/json
      description: Preview attachment file (mainly for images)
      parameters:
      - description: Attachment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - image/*
      responses:
        "200":
          description: Attachment file for preview
          schema:
            type: file
        "400":
          description: Invalid attachment ID
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Attachment not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Preview attachment
      tags:
      - Task Conversation Attachments
  /attachments/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload an image or PDF file that will be associated with a conversation
        later
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Attachment uploaded successfully
          schema:
            properties:
              data:
                type: object
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
        "413":
          description: File too large
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Upload attachment
      tags:
      - Task Conversation Attachments
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login authentication using username and password
      parameters:
      - description: Login information
        in: body
        name: loginData
        required: true
        schema:
          properties:
            password:
              type: string
            username:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            properties:
              expires_at:
                type: string
              token:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
        "429":
          description: Too frequent requests
          schema:
            properties:
              error:
                type: string
            type: object
      summary: User login
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout current user and add token to blacklist
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Invalid token
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Logout failed
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - Authentication
  /conversations:
    get:
      consumes:
      - application/json
      description: Get paginated list of conversations for a specific task
      parameters:
      - description: Task ID
        in: query
        name: task_id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Conversations retrieved successfully
          schema:
            properties:
              data:
                properties:
                  conversations:
                    items:
                      type: object
                    type: array
                  page:
                    type: integer
                  page_size:
                    type: integer
                  total:
                    type: integer
                type: object
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: List task conversations
      tags:
      - Task Conversations
    post:
      consumes:
      - application/json
      description: Create a new conversation for a specific task
      parameters:
      - description: Conversation information
        in: body
        name: conversation
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateConversationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Conversation created successfully
          schema:
            properties:
              data:
                type: object
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create task conversation
      tags:
      - Task Conversations
  /conversations/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a conversation by ID
      parameters:
      - description: Conversation ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Conversation deleted successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Invalid conversation ID
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Conversation not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete task conversation
      tags:
      - Task Conversations
    get:
      consumes:
      - application/json
      description: Get a conversation by ID
      parameters:
      - description: Conversation ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Conversation retrieved successfully
          schema:
            properties:
              data:
                type: object
              message:
                type: string
            type: object
        "400":
          description: Invalid conversation ID
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Conversation not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get task conversation
      tags:
      - Task Conversations
    put:
      consumes:
      - application/json
      description: Update a conversation's content
      parameters:
      - description: Conversation ID
        in: path
        name: id
        required: true
        type: integer
      - description: Conversation update information
        in: body
        name: conversation
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateConversationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Conversation updated successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update task conversation
      tags:
      - Task Conversations
  /conversations/{id}/details:
    get:
      consumes:
      - application/json
      description: Get a conversation with its associated result information
      parameters:
      - description: Conversation ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Conversation details retrieved successfully
          schema:
            properties:
              data:
                type: object
              message:
                type: string
            type: object
        "400":
          description: Invalid conversation ID
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Conversation not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get conversation details
      tags:
      - Task Conversations
  /conversations/{id}/execution/cancel:
    post:
      consumes:
      - application/json
      description: Cancel AI task that is executing or pending
      parameters:
      - description: Conversation ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Cancel task execution
      tags:
      - Task Execution Log
  /conversations/{id}/execution/retry:
    post:
      consumes:
      - application/json
      description: Retry failed or cancelled AI task
      parameters:
      - description: Conversation ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Retry task execution
      tags:
      - Task Execution Log
  /conversations/{id}/git-diff:
    get:
      consumes:
      - application/json
      description: Get Git diff information for a specific conversation
      parameters:
      - description: Conversation ID
        in: path
        name: id
        required: true
        type: integer
      - default: false
        description: Include file content in diff
        in: query
        name: include_content
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Git diff retrieved successfully
          schema:
            properties:
              data:
                type: object
            type: object
        "400":
          description: Invalid conversation ID
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Failed to get Git diff
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get conversation Git diff
      tags:
      - Task Conversations
  /conversations/{id}/git-diff/file:
    get:
      consumes:
      - application/json
      description: Get Git diff for a specific file in a conversation
      parameters:
      - description: Conversation ID
        in: path
        name: id
        required: true
        type: integer
      - description: File path
        in: query
        name: file_path
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: File Git diff retrieved successfully
          schema:
            properties:
              data:
                properties:
                  diff_content:
                    type: string
                  file_path:
                    type: string
                type: object
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Failed to get file Git diff
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get conversation file Git diff
      tags:
      - Task Conversations
  /conversations/{id}/logs/stream:
    get:
      consumes:
      - application/json
      description: Get real-time or historical execution logs for a specific conversation
        via Server-Sent Events (SSE)
      parameters:
      - description: Conversation ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - text/event-stream
      responses:
        "200":
          description: Real-time log stream
          schema:
            type: string
        "400":
          description: Invalid conversation ID
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Conversation not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Failed to stream logs
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Stream conversation execution logs
      tags:
      - Task Conversations
  /conversations/latest:
    get:
      consumes:
      - application/json
      description: Get the most recent conversation for a specific task
      parameters:
      - description: Task ID
        in: query
        name: task_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Latest conversation retrieved successfully
          schema:
            properties:
              data:
                type: object
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Conversation not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get latest task conversation
      tags:
      - Task Conversations
  /credentials:
    get:
      consumes:
      - application/json
      description: Get the current user's Git credential list, supporting filtering
        by name, type and pagination
      parameters:
      - description: Credential name filter
        in: query
        name: name
        type: string
      - description: Credential type filter (password/token/ssh_key)
        in: query
        name: type
        type: string
      - description: Page number, defaults to 1
        in: query
        name: page
        type: integer
      - description: Page size, defaults to 20, maximum 100
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Credential list
          schema:
            properties:
              credentials:
                items:
                  type: object
                type: array
              message:
                type: string
              page:
                type: number
              page_size:
                type: number
              total:
                type: number
              total_pages:
                type: number
            type: object
        "500":
          description: Failed to get credential list
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get Git credential list
      tags:
      - Git Credentials
    post:
      consumes:
      - application/json
      description: Create a new Git credential, supporting password, token, and SSH
        key types
      parameters:
      - description: Credential information
        in: body
        name: credential
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateCredentialRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Credential created successfully
          schema:
            properties:
              credential:
                type: object
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Failed to create credential
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create Git credential
      tags:
      - Git Credentials
  /credentials/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specified Git credential
      parameters:
      - description: Credential ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Credential deleted successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Invalid credential ID
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Credential not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete Git credential
      tags:
      - Git Credentials
    get:
      consumes:
      - application/json
      description: Get detailed information of a specified Git credential by ID
      parameters:
      - description: Credential ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Credential details
          schema:
            properties:
              credential:
                type: object
            type: object
        "400":
          description: Invalid credential ID
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Credential not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get Git credential details
      tags:
      - Git Credentials
    put:
      consumes:
      - application/json
      description: Update information of a specified Git credential
      parameters:
      - description: Credential ID
        in: path
        name: id
        required: true
        type: integer
      - description: Credential update information
        in: body
        name: credential
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateCredentialRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Credential updated successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Credential not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update Git credential
      tags:
      - Git Credentials
  /credentials/{id}/admins:
    get:
      consumes:
      - application/json
      description: Get all admins for a specific credential
      parameters:
      - description: Credential ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Credential admins retrieved successfully
          schema:
            properties:
              admins:
                items:
                  type: object
                type: array
            type: object
        "400":
          description: Invalid credential ID
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Credential not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get credential admins
      tags:
      - Git Credentials
    post:
      consumes:
      - application/json
      description: Add an admin to a credential
      parameters:
      - description: Credential ID
        in: path
        name: id
        required: true
        type: integer
      - description: Admin information
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/handlers.AddCredentialAdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Admin added to credential successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Credential not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Add admin to credential
      tags:
      - Git Credentials
  /credentials/{id}/admins/{admin_id}:
    delete:
      consumes:
      - application/json
      description: Remove an admin from a credential
      parameters:
      - description: Credential ID
        in: path
        name: id
        required: true
        type: integer
      - description: Admin ID
        in: path
        name: admin_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Admin removed from credential successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Credential not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Remove admin from credential
      tags:
      - Git Credentials
  /dashboard/recent-tasks:
    get:
      consumes:
      - application/json
      description: Get recent tasks for dashboard
      parameters:
      - default: 10
        description: Number of tasks to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Recent tasks
          schema:
            properties:
              tasks:
                items:
                  type: object
                type: array
            type: object
        "400":
          description: Invalid request parameters
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get recent tasks
      tags:
      - Dashboard
  /dashboard/stats:
    get:
      consumes:
      - application/json
      description: Get aggregated system statistics for dashboard. Only accessible
        by super administrators.
      produces:
      - application/json
      responses:
        "200":
          description: Dashboard statistics
          schema:
            properties:
              stats:
                additionalProperties: true
                type: object
            type: object
        "403":
          description: Insufficient permissions
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get dashboard statistics
      tags:
      - Dashboard
  /environments:
    get:
      consumes:
      - application/json
      description: Get current user's development environment list with pagination
        and filtering
      parameters:
      - description: Page number, default is 1
        in: query
        name: page
        type: integer
      - description: Page size, default is 10
        in: query
        name: page_size
        type: integer
      - description: Environment name filter
        in: query
        name: name
        type: string
      - description: Docker image filter
        in: query
        name: docker_image
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Environment list
          schema:
            properties:
              environments:
                items:
                  type: object
                type: array
              total:
                type: number
            type: object
      security:
      - BearerAuth: []
      summary: Get environment list
      tags:
      - Development Environment
    post:
      consumes:
      - application/json
      description: Create a new development environment
      parameters:
      - description: Environment information
        in: body
        name: environment
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateEnvironmentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Environment created successfully
          schema:
            properties:
              environment:
                type: object
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create development environment
      tags:
      - Development Environment
  /environments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete specified development environment
      parameters:
      - description: Environment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Environment deleted successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Delete failed
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete environment
      tags:
      - Development Environment
    get:
      consumes:
      - application/json
      description: Get detailed information of a development environment by ID
      parameters:
      - description: Environment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Environment details
          schema:
            properties:
              environment:
                type: object
            type: object
        "404":
          description: Environment not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get environment details
      tags:
      - Development Environment
    put:
      consumes:
      - application/json
      description: Update specified development environment information
      parameters:
      - description: Environment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Environment update information
        in: body
        name: environment
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateEnvironmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Environment updated successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update environment
      tags:
      - Development Environment
  /environments/{id}/admins:
    get:
      consumes:
      - application/json
      description: Get all admins that have access to a specific environment
      parameters:
      - description: Environment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Environment admins
          schema:
            $ref: '#/definitions/handlers.EnvironmentAdminsResponse'
        "404":
          description: Environment not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get environment admins
      tags:
      - Development Environment
    post:
      consumes:
      - application/json
      description: Add an admin to the environment's admin list
      parameters:
      - description: Environment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Admin information
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/handlers.AddAdminToEnvironmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Admin added successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Environment not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Add admin to environment
      tags:
      - Development Environment
  /environments/{id}/admins/{admin_id}:
    delete:
      consumes:
      - application/json
      description: Remove an admin from the environment's admin list
      parameters:
      - description: Environment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Admin ID
        in: path
        name: admin_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Admin removed successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Environment not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Remove admin from environment
      tags:
      - Development Environment
  /environments/available-images:
    get:
      consumes:
      - application/json
      description: Get available environment images from system configuration
      produces:
      - application/json
      responses:
        "200":
          description: Available environment images
          schema:
            properties:
              images:
                items:
                  type: object
                type: array
            type: object
      security:
      - BearerAuth: []
      summary: Get available environment images
      tags:
      - Development Environment
  /health:
    get:
      consumes:
      - application/json
      description: Check server status
      produces:
      - application/json
      responses:
        "200":
          description: Server status is normal
          schema:
            properties:
              lang:
                type: string
              message:
                type: string
              status:
                type: string
            type: object
      summary: Health check
      tags:
      - System
  /projects:
    get:
      consumes:
      - application/json
      description: Get current user's project list with pagination, filtering and
        sorting
      parameters:
      - description: Project name filter (fuzzy matching)
        in: query
        name: name
        type: string
      - description: Protocol type filter (https/ssh)
        in: query
        name: protocol
        type: string
      - description: Page number, defaults to 1
        in: query
        name: page
        type: integer
      - description: Page size, defaults to 20
        in: query
        name: page_size
        type: integer
      - description: 'Sort field: name, task_count, created_at (defaults to created_at)'
        in: query
        name: sort_by
        type: string
      - description: 'Sort direction: asc, desc (defaults to desc)'
        in: query
        name: sort_direction
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Project list
          schema:
            properties:
              page:
                type: number
              page_size:
                type: number
              projects:
                items:
                  type: object
                type: array
              total:
                type: number
            type: object
        "500":
          description: Failed to get project list
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get project list
      tags:
      - Project
    post:
      consumes:
      - application/json
      description: Create a new project
      parameters:
      - description: Project information
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateProjectRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Project created successfully
          schema:
            properties:
              id:
                type: number
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Project creation failed
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create project
      tags:
      - Project
  /projects/{id}:
    delete:
      consumes:
      - application/json
      description: Delete specified project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Project deleted successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Invalid project ID
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Project not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete project
      tags:
      - Project
    get:
      consumes:
      - application/json
      description: Get project detailed information by project ID
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Project details
          schema:
            properties:
              project:
                type: object
            type: object
        "400":
          description: Invalid project ID
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Project not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get project details
      tags:
      - Project
    put:
      consumes:
      - application/json
      description: Update specified project information
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Project update information
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateProjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Project updated successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Project not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update project
      tags:
      - Project
  /projects/{id}/kanban:
    get:
      consumes:
      - application/json
      description: Get tasks grouped by status for a specific project to display in
        kanban view
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Kanban tasks retrieved successfully
          schema:
            properties:
              data:
                $ref: '#/definitions/handlers.GetKanbanTasksResponse'
              message:
                type: string
            type: object
        "400":
          description: Invalid project ID
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Project not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get kanban tasks
      tags:
      - Tasks
  /projects/{id}/tasks/batch/status:
    put:
      consumes:
      - application/json
      description: Update the status of multiple tasks in a single request within
        a specific project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Batch status update information
        in: body
        name: batch
        required: true
        schema:
          $ref: '#/definitions/handlers.BatchUpdateTaskStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Batch update completed
          schema:
            properties:
              data:
                $ref: '#/definitions/handlers.BatchUpdateTaskStatusResponse'
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Project not found or task not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Batch update task status
      tags:
      - Tasks
  /projects/branches:
    post:
      consumes:
      - application/json
      description: Fetch Git repository branch list using provided credentials and
        verify access permissions
      parameters:
      - description: Repository information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.FetchRepositoryBranchesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Fetch branch list successfully
          schema:
            properties:
              message:
                type: string
              result:
                $ref: '#/definitions/handlers.FetchRepositoryBranchesResponse'
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Failed to fetch branch list
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Fetch Git repository branch list
      tags:
      - Project
  /projects/credentials:
    get:
      consumes:
      - application/json
      description: Get Git credential list compatible with protocol type, auto-detected
        from repo URL or specified protocol
      parameters:
      - description: Repository URL for protocol auto-detection
        in: query
        name: repo_url
        type: string
      - description: Protocol type (https/ssh) - fallback if repo_url not provided
        in: query
        name: protocol
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get credential list successfully
          schema:
            properties:
              credentials:
                items:
                  type: object
                type: array
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get compatible credentials
      tags:
      - Project
  /settings:
    get:
      consumes:
      - application/json
      description: Get all system configurations without pagination
      produces:
      - application/json
      responses:
        "200":
          description: All configurations
          schema:
            properties:
              configs:
                items:
                  type: object
                type: array
            type: object
      security:
      - BearerAuth: []
      summary: Get all configurations
      tags:
      - System Configuration
    put:
      consumes:
      - application/json
      description: Update multiple system configurations in a single request
      parameters:
      - description: Configuration updates
        in: body
        name: configs
        required: true
        schema:
          $ref: '#/definitions/handlers.BatchUpdateConfigsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Configurations updated successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Batch update configurations
      tags:
      - System Configuration
  /tasks:
    post:
      consumes:
      - application/json
      description: Create a new task with optional requirement description and branch
        fetching
      parameters:
      - description: Task information
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateTaskRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Task created successfully
          schema:
            properties:
              data:
                $ref: '#/definitions/handlers.CreateTaskResponse'
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create task
      tags:
      - Tasks
  /tasks/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Task deleted successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Invalid task ID
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Task not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete task
      tags:
      - Tasks
    put:
      consumes:
      - application/json
      description: Update task information
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Task update information
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Task updated successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update task
      tags:
      - Tasks
  /tasks/{id}/git-diff:
    get:
      consumes:
      - application/json
      description: Get the git diff between start branch and work branch for a task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - default: false
        description: Include file content in diff
        in: query
        name: include_content
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Git diff retrieved successfully
          schema:
            properties:
              data:
                type: object
            type: object
        "400":
          description: Invalid task ID or missing workspace
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: No permission to access task
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Task not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Failed to get git diff
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get task git diff
      tags:
      - Tasks
  /tasks/{id}/git-diff/file:
    get:
      consumes:
      - application/json
      description: Get the git diff for a specific file between start branch and work
        branch
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: File path to get diff for
        in: query
        name: file_path
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: File diff retrieved successfully
          schema:
            properties:
              data:
                properties:
                  diff_content:
                    type: string
                  file_path:
                    type: string
                type: object
            type: object
        "400":
          description: Invalid task ID or missing file path
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: No permission to access task
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Task not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Failed to get file diff
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get task git diff file
      tags:
      - Tasks
  /tasks/{id}/push:
    post:
      consumes:
      - application/json
      description: Push the task's work branch to the remote repository
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Push options
        in: body
        name: request
        schema:
          properties:
            force_push:
              type: boolean
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Branch pushed successfully
          schema:
            properties:
              data:
                properties:
                  output:
                    type: string
                type: object
              message:
                type: string
            type: object
        "400":
          description: Invalid task ID
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Authentication failed
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Failed to push branch
          schema:
            properties:
              details:
                type: string
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Push task branch
      tags:
      - Tasks
  /user/change-password:
    put:
      consumes:
      - application/json
      description: Allow authenticated user to change their own password
      parameters:
      - description: Password change data
        in: body
        name: passwordData
        required: true
        schema:
          properties:
            current_password:
              type: string
            new_password:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Current password incorrect
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Failed to change password
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Change own password
      tags:
      - User
  /user/current:
    get:
      consumes:
      - application/json
      description: Get information of current logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            properties:
              avatar:
                type: object
              name:
                type: string
              role:
                type: string
              username:
                type: string
            type: object
        "500":
          description: Failed to get user information
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get current user information
      tags:
      - User
  /user/update-avatar:
    put:
      consumes:
      - application/json
      description: Allow authenticated user to update their own avatar
      parameters:
      - description: Avatar update data
        in: body
        name: avatarData
        required: true
        schema:
          properties:
            avatar_uuid:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Avatar updated successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Request parameter error
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Avatar not found
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update own avatar
      tags:
      - User
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
